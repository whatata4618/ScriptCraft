import React, { useState, useEffect } from 'react';
import { FileText, Sparkles, Download, Layout, Wand2, Zap, Image, Share2, Crown, Menu, X, Save, Clock, Trash2 } from 'lucide-react';

const ScriptCraft = () => {
  const [isPremium, setIsPremium] = useState(false);
  const [currentView, setCurrentView] = useState('dashboard');
  const [scripts, setScripts] = useState([]);
  const [currentScript, setCurrentScript] = useState(null);
  const [scriptContent, setScriptContent] = useState('');
  const [scriptTitle, setScriptTitle] = useState('Untitled Script');
  const [aiUsageToday, setAiUsageToday] = useState(0);
  const [showUpgradeModal, setShowUpgradeModal] = useState(false);
  const [selectedTone, setSelectedTone] = useState('conversational');
  const [generatedIdeas, setGeneratedIdeas] = useState([]);
  const [generatedHooks, setGeneratedHooks] = useState([]);
  const [shotList, setShotList] = useState([]);
  const [showSidebar, setShowSidebar] = useState(true);
  const [isLoading, setIsLoading] = useState(false);
  const [adminCode, setAdminCode] = useState('');
  const [codeError, setCodeError] = useState('');
  
  // Secret admin code - change this to whatever you want
  const ADMIN_CODE = 'SC-7K9M-PREM-X4J2';

  // Load data on mount
  useEffect(() => {
    loadUserData();
  }, []);

  const loadUserData = async () => {
    try {
      const result = await window.storage.get('scriptcraft-user-data');
      if (result) {
        const data = JSON.parse(result.value);
        setIsPremium(data.isPremium || false);
        setScripts(data.scripts || []);
        setAiUsageToday(data.aiUsageToday || 0);
      }
    } catch (error) {
      console.log('No existing user data, starting fresh');
    }
  };

  const saveUserData = async () => {
    const data = {
      isPremium,
      scripts,
      aiUsageToday,
      lastSaved: new Date().toISOString()
    };
    await window.storage.set('scriptcraft-user-data', JSON.stringify(data));
  };

  useEffect(() => {
    if (scripts.length > 0 || isPremium) {
      saveUserData();
    }
  }, [scripts, isPremium, aiUsageToday]);

  const checkAILimit = () => {
    if (!isPremium && aiUsageToday >= 3) {
      setShowUpgradeModal(true);
      return false;
    }
    return true;
  };

  const incrementAIUsage = () => {
    if (!isPremium) {
      setAiUsageToday(prev => prev + 1);
    }
  };

  const createNewScript = () => {
    const newScript = {
      id: Date.now(),
      title: 'Untitled Script',
      content: '',
      created: new Date().toISOString(),
      modified: new Date().toISOString()
    };
    setScripts([newScript, ...scripts]);
    setCurrentScript(newScript.id);
    setScriptContent('');
    setScriptTitle('Untitled Script');
    setCurrentView('editor');
  };

  const saveCurrentScript = () => {
    if (!currentScript) return;
    
    setScripts(scripts.map(s => 
      s.id === currentScript 
        ? { ...s, title: scriptTitle, content: scriptContent, modified: new Date().toISOString() }
        : s
    ));
  };

  const loadScript = (scriptId) => {
    const script = scripts.find(s => s.id === scriptId);
    if (script) {
      setCurrentScript(scriptId);
      setScriptContent(script.content);
      setScriptTitle(script.title);
      setCurrentView('editor');
    }
  };

  const deleteScript = (scriptId) => {
    setScripts(scripts.filter(s => s.id !== scriptId));
    if (currentScript === scriptId) {
      setCurrentScript(null);
      setScriptContent('');
      setScriptTitle('Untitled Script');
    }
  };

  const generateIdeas = async () => {
    if (!checkAILimit()) return;
    
    setIsLoading(true);
    incrementAIUsage();
    
    // Simulate AI generation
    setTimeout(() => {
      const ideas = [
        { title: "The 5-Minute Morning Routine That Changed My Life", angle: "Time-efficient transformation story" },
        { title: "Why Everyone Is Doing [Topic] Wrong", angle: "Contrarian, myth-busting approach" },
        { title: "I Tried [Topic] For 30 Days - Here's What Happened", angle: "Personal experiment & results" },
        { title: "[Topic] Explained Like You're 5 Years Old", angle: "Simplification for beginners" },
        { title: "The Dark Side of [Topic] Nobody Talks About", angle: "Revealing hidden truths" }
      ];
      setGeneratedIdeas(ideas);
      setIsLoading(false);
    }, 1500);
  };

  const generateBeatSheet = () => {
    if (!isPremium) {
      setShowUpgradeModal(true);
      return;
    }
    
    const beatSheet = `[HOOK - 0:00-0:15]
• Open with a bold statement or question
• Tease the transformation or payoff
• Show the problem visually

[PROBLEM - 0:15-1:00]
• Establish the common struggle
• Build relatability with your audience
• Show consequences of ignoring this

[SOLUTION - 1:00-3:30]
• Present your main content/method
• Break into 3-5 clear steps
• Include examples or demonstrations

[PROOF - 3:30-4:00]
• Share results or testimonials
• Show before/after if applicable
• Build credibility

[CALL TO ACTION - 4:00-4:30]
• Tell viewers exactly what to do next
• Subscribe, comment, or check description
• Tease next video`;

    setScriptContent(prev => prev + '\n\n' + beatSheet);
  };

  const generateHooks = () => {
    if (!isPremium) {
      setShowUpgradeModal(true);
      return;
    }
    
    const hooks = [
      "Stop. If you're still doing [common mistake], you're wasting your time.",
      "In the next 60 seconds, I'll show you something that took me 5 years to learn.",
      "This changed everything for me, and nobody talks about it.",
      "I'm about to expose the biggest lie in [your niche].",
      "Watch this before you waste another dollar on [topic].",
      "Here's what [successful people] do that you probably don't.",
      "I was skeptical too, until I tried this one thing.",
      "The algorithm doesn't want you to see this, but here's the truth.",
      "Five years ago, I made a mistake. Today, I'm fixing it.",
      "Everyone told me this wouldn't work. I proved them all wrong."
    ];
    setGeneratedHooks(hooks);
  };

  const shiftTone = (tone) => {
    if (!isPremium) {
      setShowUpgradeModal(true);
      return;
    }
    
    setSelectedTone(tone);
    // In a real app, this would call an AI API to rewrite the content
    alert(`Script will be rewritten in ${tone} tone. (This would use AI in production)`);
  };

  const generateShotList = () => {
    if (!isPremium) {
      setShowUpgradeModal(true);
      return;
    }
    
    const shots = [
      { time: "0:00-0:05", shot: "Medium close-up", description: "Direct to camera, energetic delivery" },
      { time: "0:05-0:15", shot: "B-roll montage", description: "Quick cuts showing the problem" },
      { time: "0:15-0:30", shot: "Wide shot", description: "Establish workspace/setting" },
      { time: "0:30-1:00", shot: "Screen recording", description: "Show process or demonstration" },
      { time: "1:00-1:15", shot: "Close-up (hands)", description: "Detail work or product showcase" },
      { time: "1:15-2:00", shot: "Over-the-shoulder", description: "Working through the steps" }
    ];
    setShotList(shots);
  };

  const exportScript = (format) => {
    if (format === 'pdf' && !isPremium) {
      setShowUpgradeModal(true);
      return;
    }
    
    const blob = new Blob([scriptContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${scriptTitle}.${format === 'pdf' ? 'txt' : 'txt'}`;
    a.click();
  };

  const upgradeToPremium = async () => {
    if (adminCode !== ADMIN_CODE) {
      setCodeError('Invalid admin code. Contact support for premium access.');
      return;
    }
    
    setIsPremium(true);
    setShowUpgradeModal(false);
    setAdminCode('');
    setCodeError('');
    await saveUserData();
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white">
      {/* Header */}
      <header className="bg-slate-900/50 backdrop-blur-lg border-b border-purple-500/20 sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <button 
              onClick={() => setShowSidebar(!showSidebar)}
              className="lg:hidden p-2 hover:bg-white/10 rounded-lg transition-colors"
            >
              {showSidebar ? <X size={24} /> : <Menu size={24} />}
            </button>
            <Sparkles className="text-purple-400" size={32} />
            <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
              ScriptCraft
            </h1>
          </div>
          
          <div className="flex items-center gap-4">
            {!isPremium && (
              <div className="text-sm text-purple-300 hidden sm:block">
                AI Uses Today: {aiUsageToday}/3
              </div>
            )}
            <button
              onClick={() => isPremium ? null : setShowUpgradeModal(true)}
              className={`flex items-center gap-2 px-4 py-2 rounded-lg font-semibold transition-all ${
                isPremium 
                  ? 'bg-gradient-to-r from-yellow-500 to-orange-500 text-white'
                  : 'bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500'
              }`}
            >
              <Crown size={18} />
              {isPremium ? 'Premium' : 'Upgrade $38'}
            </button>
          </div>
        </div>
      </header>

      <div className="flex">
        {/* Sidebar */}
        <aside className={`${showSidebar ? 'translate-x-0' : '-translate-x-full'} lg:translate-x-0 fixed lg:sticky top-16 lg:top-0 h-[calc(100vh-4rem)] w-64 bg-slate-900/50 backdrop-blur-lg border-r border-purple-500/20 p-4 transition-transform z-40`}>
          <nav className="space-y-2">
            <button
              onClick={() => setCurrentView('dashboard')}
              className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg transition-colors ${
                currentView === 'dashboard' ? 'bg-purple-600' : 'hover:bg-white/10'
              }`}
            >
              <Layout size={20} />
              Dashboard
            </button>
            <button
              onClick={() => setCurrentView('ideas')}
              className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg transition-colors ${
                currentView === 'ideas' ? 'bg-purple-600' : 'hover:bg-white/10'
              }`}
            >
              <Sparkles size={20} />
              AI Ideas
            </button>
            <button
              onClick={createNewScript}
              className="w-full flex items-center gap-3 px-4 py-3 rounded-lg hover:bg-white/10 transition-colors"
            >
              <FileText size={20} />
              New Script
            </button>
          </nav>

          <div className="mt-6 pt-6 border-t border-purple-500/20">
            <h3 className="text-sm font-semibold text-purple-300 mb-3">Recent Scripts</h3>
            <div className="space-y-2 max-h-96 overflow-y-auto">
              {scripts.map(script => (
                <div key={script.id} className="group flex items-center justify-between p-2 rounded hover:bg-white/5">
                  <button
                    onClick={() => loadScript(script.id)}
                    className="flex-1 text-left text-sm truncate"
                  >
                    {script.title}
                  </button>
                  <button
                    onClick={() => deleteScript(script.id)}
                    className="opacity-0 group-hover:opacity-100 p-1 hover:bg-red-500/20 rounded transition-opacity"
                  >
                    <Trash2 size={14} />
                  </button>
                </div>
              ))}
            </div>
          </div>
        </aside>

        {/* Main Content */}
        <main className="flex-1 lg:ml-0 ml-0 p-8">
          {currentView === 'dashboard' && (
            <div>
              <h2 className="text-3xl font-bold mb-6">Welcome to ScriptCraft</h2>
              
              <div className="grid md:grid-cols-3 gap-6 mb-8">
                <div className="bg-white/5 backdrop-blur-lg rounded-xl p-6 border border-purple-500/20">
                  <FileText className="text-purple-400 mb-3" size={32} />
                  <h3 className="text-xl font-semibold mb-2">Scripts Created</h3>
                  <p className="text-3xl font-bold text-purple-400">{scripts.length}</p>
                </div>
                
                <div className="bg-white/5 backdrop-blur-lg rounded-xl p-6 border border-purple-500/20">
                  <Sparkles className="text-pink-400 mb-3" size={32} />
                  <h3 className="text-xl font-semibold mb-2">AI Uses Today</h3>
                  <p className="text-3xl font-bold text-pink-400">{isPremium ? '∞' : `${aiUsageToday}/3`}</p>
                </div>
                
                <div className="bg-white/5 backdrop-blur-lg rounded-xl p-6 border border-purple-500/20">
                  <Crown className="text-yellow-400 mb-3" size={32} />
                  <h3 className="text-xl font-semibold mb-2">Account Status</h3>
                  <p className="text-xl font-bold text-yellow-400">{isPremium ? 'Premium' : 'Free'}</p>
                </div>
              </div>

              <div className="bg-white/5 backdrop-blur-lg rounded-xl p-8 border border-purple-500/20">
                <h3 className="text-2xl font-bold mb-4">Quick Start</h3>
                <div className="grid md:grid-cols-2 gap-4">
                  <button
                    onClick={() => setCurrentView('ideas')}
                    className="p-6 bg-gradient-to-br from-purple-600/20 to-pink-600/20 rounded-lg border border-purple-500/30 hover:border-purple-500 transition-colors text-left"
                  >
                    <Sparkles className="mb-3 text-purple-400" size={28} />
                    <h4 className="font-semibold mb-2">Generate Ideas</h4>
                    <p className="text-sm text-purple-200">Let AI brainstorm unique angles for your content</p>
                  </button>
                  
                  <button
                    onClick={createNewScript}
                    className="p-6 bg-gradient-to-br from-blue-600/20 to-purple-600/20 rounded-lg border border-blue-500/30 hover:border-blue-500 transition-colors text-left"
                  >
                    <FileText className="mb-3 text-blue-400" size={28} />
                    <h4 className="font-semibold mb-2">Start Writing</h4>
                    <p className="text-sm text-blue-200">Create a new script from scratch</p>
                  </button>
                </div>
              </div>
            </div>
          )}

          {currentView === 'ideas' && (
            <div>
              <h2 className="text-3xl font-bold mb-6">AI Idea Generator</h2>
              
              <div className="bg-white/5 backdrop-blur-lg rounded-xl p-8 border border-purple-500/20 mb-6">
                <label className="block text-sm font-semibold mb-3 text-purple-300">
                  What's your topic or niche?
                </label>
                <div className="flex gap-3">
                  <input
                    type="text"
                    placeholder="e.g., productivity, cooking, fitness..."
                    className="flex-1 px-4 py-3 bg-white/5 border border-purple-500/30 rounded-lg focus:outline-none focus:border-purple-500"
                  />
                  <button
                    onClick={generateIdeas}
                    disabled={isLoading}
                    className="px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg font-semibold hover:from-purple-500 hover:to-pink-500 transition-all disabled:opacity-50"
                  >
                    {isLoading ? 'Generating...' : 'Generate Ideas'}
                  </button>
                </div>
              </div>

              {generatedIdeas.length > 0 && (
                <div className="space-y-4">
                  {generatedIdeas.map((idea, idx) => (
                    <div key={idx} className="bg-white/5 backdrop-blur-lg rounded-xl p-6 border border-purple-500/20 hover:border-purple-500 transition-colors">
                      <h3 className="text-xl font-semibold mb-2">{idea.title}</h3>
                      <p className="text-purple-300 text-sm mb-3">Angle: {idea.angle}</p>
                      <button
                        onClick={() => {
                          setScriptTitle(idea.title);
                          setScriptContent(`# ${idea.title}\n\n[Start writing your script here...]\n\n---\n\nAngle: ${idea.angle}`);
                          createNewScript();
                        }}
                        className="text-sm text-purple-400 hover:text-purple-300 font-semibold"
                      >
                        Use This Idea →
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {currentView === 'editor' && (
            <div>
              <div className="flex items-center justify-between mb-6">
                <input
                  type="text"
                  value={scriptTitle}
                  onChange={(e) => setScriptTitle(e.target.value)}
                  className="text-3xl font-bold bg-transparent border-none outline-none focus:outline-none"
                  placeholder="Script Title"
                />
                <button
                  onClick={saveCurrentScript}
                  className="flex items-center gap-2 px-4 py-2 bg-purple-600 rounded-lg hover:bg-purple-500 transition-colors"
                >
                  <Save size={18} />
                  Save
                </button>
              </div>

              <div className="grid lg:grid-cols-3 gap-6 mb-6">
                <button
                  onClick={generateBeatSheet}
                  className="p-4 bg-white/5 rounded-lg border border-purple-500/20 hover:border-purple-500 transition-colors"
                >
                  <Zap className="text-purple-400 mb-2" size={24} />
                  <div className="font-semibold">Beat Sheet</div>
                  <div className="text-xs text-purple-300">{isPremium ? 'Generate structure' : '🔒 Premium'}</div>
                </button>

                <button
                  onClick={generateHooks}
                  className="p-4 bg-white/5 rounded-lg border border-purple-500/20 hover:border-purple-500 transition-colors"
                >
                  <Wand2 className="text-pink-400 mb-2" size={24} />
                  <div className="font-semibold">Hook Ideas</div>
                  <div className="text-xs text-pink-300">{isPremium ? 'Generate hooks' : '🔒 Premium'}</div>
                </button>

                <button
                  onClick={generateShotList}
                  className="p-4 bg-white/5 rounded-lg border border-purple-500/20 hover:border-purple-500 transition-colors"
                >
                  <Image className="text-blue-400 mb-2" size={24} />
                  <div className="font-semibold">Shot List</div>
                  <div className="text-xs text-blue-300">{isPremium ? 'Plan visuals' : '🔒 Premium'}</div>
                </button>
              </div>

              <div className="bg-white/5 backdrop-blur-lg rounded-xl p-6 border border-purple-500/20 mb-6">
                <textarea
                  value={scriptContent}
                  onChange={(e) => setScriptContent(e.target.value)}
                  placeholder="Start writing your script here..."
                  className="w-full h-96 bg-transparent border-none outline-none resize-none text-lg"
                />
                <div className="flex items-center justify-between mt-4 pt-4 border-t border-purple-500/20">
                  <div className="text-sm text-purple-300">
                    {scriptContent.split(' ').filter(w => w).length} words
                  </div>
                  <div className="flex gap-2">
                    <button
                      onClick={() => exportScript('txt')}
                      className="px-4 py-2 bg-white/5 rounded-lg hover:bg-white/10 transition-colors text-sm"
                    >
                      Export .txt
                    </button>
                    <button
                      onClick={() => exportScript('pdf')}
                      className="px-4 py-2 bg-purple-600 rounded-lg hover:bg-purple-500 transition-colors text-sm"
                    >
                      {isPremium ? 'Export PDF' : '🔒 Export PDF'}
                    </button>
                  </div>
                </div>
              </div>

              {generatedHooks.length > 0 && (
                <div className="bg-white/5 backdrop-blur-lg rounded-xl p-6 border border-purple-500/20 mb-6">
                  <h3 className="text-xl font-bold mb-4">Generated Hooks</h3>
                  <div className="space-y-3">
                    {generatedHooks.map((hook, idx) => (
                      <div key={idx} className="p-3 bg-white/5 rounded-lg border border-purple-500/10 hover:border-purple-500/30 transition-colors">
                        <p className="text-sm">{hook}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {shotList.length > 0 && (
                <div className="bg-white/5 backdrop-blur-lg rounded-xl p-6 border border-purple-500/20">
                  <h3 className="text-xl font-bold mb-4">Shot List</h3>
                  <div className="space-y-3">
                    {shotList.map((shot, idx) => (
                      <div key={idx} className="grid grid-cols-3 gap-4 p-3 bg-white/5 rounded-lg border border-purple-500/10">
                        <div className="text-sm font-semibold text-purple-300">{shot.time}</div>
                        <div className="text-sm font-semibold">{shot.shot}</div>
                        <div className="text-sm text-purple-200">{shot.description}</div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
        </main>
      </div>

      {/* Upgrade Modal */}
      {showUpgradeModal && (
        <div className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-gradient-to-br from-slate-900 to-purple-900 rounded-2xl p-8 max-w-2xl w-full border-2 border-purple-500/50 shadow-2xl">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <Crown className="text-yellow-400" size={32} />
                <h2 className="text-3xl font-bold">Upgrade to Premium</h2>
              </div>
              <button
                onClick={() => setShowUpgradeModal(false)}
                className="p-2 hover:bg-white/10 rounded-lg transition-colors"
              >
                <X size={24} />
              </button>
            </div>

            <div className="space-y-4 mb-8">
              <div className="flex items-start gap-3">
                <div className="w-6 h-6 rounded-full bg-purple-600 flex items-center justify-center flex-shrink-0 mt-1">✓</div>
                <div>
                  <div className="font-semibold">Unlimited AI Brainstorming</div>
                  <div className="text-sm text-purple-300">Generate endless ideas, angles, and outlines</div>
                </div>
              </div>
              <div className="flex items-start gap-3">
                <div className="w-6 h-6 rounded-full bg-purple-600 flex items-center justify-center flex-shrink-0 mt-1">✓</div>
                <div>
                  <div className="font-semibold">Advanced Script Enhancement</div>
                  <div className="text-sm text-purple-300">Tone shifter, hook generator, pacing analyzer</div>
                </div>
              </div>
              <div className="flex items-start gap-3">
                <div className="w-6 h-6 rounded-full bg-purple-600 flex items-center justify-center flex-shrink-0 mt-1">✓</div>
                <div>
                  <div className="font-semibold">Visual Planning Suite</div>
                  <div className="text-sm text-purple-300">Shot lists, storyboards, and production tools</div>
                </div>
              </div>
              <div className="flex items-start gap-3">
                <div className="w-6 h-6 rounded-full bg-purple-600 flex items-center justify-center flex-shrink-0 mt-1">✓</div>
                <div>
                  <div className="font-semibold">Professional Exports</div>
                  <div className="text-sm text-purple-300">PDF, teleprompter format, social snippets</div>
                </div>
              </div>
            </div>

            <div className="bg-white/5 rounded-xl p-6 mb-6 border border-purple-500/20">
              <div className="text-center">
                <div className="text-5xl font-bold mb-2 bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
                  $38
                </div>
                <div className="text-xl font-semibold text-purple-300 mb-1">One-Time Payment</div>
                <div className="text-sm text-purple-400">Lifetime Access • No Recurring Fees</div>
              </div>
            </div>

            <div className="mb-6">
              <label className="block text-sm font-semibold mb-3 text-purple-300">
                Enter Premium Access Code
              </label>
              <input
                type="text"
                value={adminCode}
                onChange={(e) => {
                  setAdminCode(e.target.value);
                  setCodeError('');
                }}
                placeholder="Enter your access code"
                className="w-full px-4 py-3 bg-white/5 border border-purple-500/30 rounded-lg focus:outline-none focus:border-purple-500"
              />
              {codeError && (
                <p className="mt-2 text-sm text-red-400">{codeError}</p>
              )}
            </div>

            <button
              onClick={upgradeToPremium}
              className="w-full py-4 bg-gradient-to-r from-purple-600 to-pink-600 rounded-xl font-bold text-lg hover:from-purple-500 hover:to-pink-500 transition-all shadow-lg"
            >
              Activate Premium Access
            </button>

            <p className="text-center text-sm text-purple-300 mt-4">
              Don't have a code? Contact us at support@scriptcraft.app
            </p>
          </div>
        </div>
      )}

      {/* Free Tier Ad Banner */}
      {!isPremium && currentView !== 'dashboard' && (
        <div className="fixed bottom-0 left-0 right-0 bg-gradient-to-r from-purple-900 to-pink-900 p-3 text-center text-sm border-t border-purple-500/20">
          <span className="mr-4">📢 Want unlimited AI features?</span>
          <button
            onClick={() => setShowUpgradeModal(true)}
            className="px-4 py-1 bg-white/20 rounded-full hover:bg-white/30 transition-colors font-semibold"
          >
            Upgrade to Premium
          </button>
        </div>
      )}
    </div>
  );
};

export default ScriptCraft;
